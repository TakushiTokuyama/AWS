Parameters:
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t1.micro
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: "AWS::EC2::KeyPair::KeyName"
  AMIID:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
  AvailabilityZonePublicSubnet:
    Description: Input a AZ where Public Subnet will be created.
    Type: AWS::EC2::AvailabilityZone::Name
  AvailabilityZonePrivateSubnetA:
    Description: Input a AZ where Private Subnet will be created.
    Type: AWS::EC2::AvailabilityZone::Name
  AvailabilityZonePrivateSubnetB:
    Description: Input a AZ where Private Subnet RDS will be created.
    Type: AWS::EC2::AvailabilityZone::Name
  DBInstanceName:
    Type: String
  DBName:
    Type: String
    Default: "SimpleSteppingStoreRDS"
    NoEcho: false
    MinLength: 1
    MaxLength: 25
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: "must begin with a letter and contain only alphanumeric characters."

Resources:
  # Create Vpc
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/20
      EnableDnsHostnames: "true"
      EnableDnsSupport: "true"
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: VPC

  # Create PublicSubnet
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Ref AvailabilityZonePublicSubnet
      Tags:
        - Key: Name
          Value: PublicSubnet

  # Create PrivateSubnetA
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Ref AvailabilityZonePrivateSubnetA
      Tags:
        - Key: Name
          Value: PrivateSubnetA

  # Create PrivateSubnetB
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Ref AvailabilityZonePrivateSubnetB
      Tags:
        - Key: Name
          Value: PrivateSubnetB

  # Create InternetGateway
  InternetGateWay:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: InternetGateway

  # Attach InternetGateway
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: InternetGateWay
      VpcId:
        Ref: VPC

  # Create RouteTable
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  # Attach RouteTable to PublicSubnet
  EntranceRouteTableToPublicSubnet:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet
      RouteTableId:
        Ref: PublicRouteTable

  # Attach RouteTable to InternetGateway
  EntranceRouteTableToInternetGateway:
    Type: AWS::EC2::Route
    Properties:
      GatewayId:
        Ref: InternetGateWay
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0

  # Create Private_RouteTable
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable

  # Attach RouteTable to Private_Subnet
  PrivateEntranceRouteTableToPrivateSubnet:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnetA
      RouteTableId:
        Ref: PrivateRouteTable

    # Create Private_RouteTableB
  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: PrivateRouteTableB

  # Attach RouteTable to Private_SubnetB
  PrivateEntranceRouteTableToPrivateSubnetB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnetB
      RouteTableId:
        Ref: PrivateRouteTableB

  # Create NetworkACL
  PublicNetworkACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: PublicNetworkACL

  # Create NetworkACL InboundRule
  PublicNetworkACLInboundRule01:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicNetworkACL
      Egress: false
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      CidrBlock: 0.0.0.0/0

  # Create NetWorkACL OutBoundRule
  PublicNetworkACLOutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicNetworkACL
      Egress: true
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      CidrBlock: 0.0.0.0/0

  # Create NetworkACL to Subnet
  PublicEntranceNetworkACLToPublicSubnet:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId:
        Ref: PublicNetworkACL
      SubnetId:
        Ref: PublicSubnet

    # Create NetworkACL
  PrivateNetworkACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: PrivateNetworkACL

  # Create NetworkACL InboundRule
  PrivateNetworkACLInboundRule01:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PrivateNetworkACL
      Egress: false
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      CidrBlock: 0.0.0.0/0

  # Create NetWorkACL OutBoundRule
  PrivateNetworkACLOutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PrivateNetworkACL
      Egress: true
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      CidrBlock: 0.0.0.0/0

  # Create NetworkACL to Subnet
  PrivateEntranceNetworkACLToPublicSubnet:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId:
        Ref: PrivateNetworkACL
      SubnetId:
        Ref: PrivateSubnetA

  # Create ScurityGroup
  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "SimpleSteppingStore"
      GroupName: "SimpleSteppingStore PublicSecurityGroup"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
      VpcId:
        Ref: VPC

  # Create PublicEC2Instance
  PublicEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: PublicEC2Instance
      ImageId: !Ref AMIID
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - !Ref PublicSecurityGroup
          SubnetId:
            Ref: PublicSubnet
      UserData:
        Fn::Base64: |
          #!/bin/bash -ex
          sudo yum update -y
      Tags:
        - Key: "Name"
          Value: "EC2"

  RDSDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      DBInstanceClass: db.t2.micro
      AvailabilityZone: !Ref AvailabilityZonePrivateSubnetA
      StorageType: gp2
      BackupRetentionPeriod: 30
      DBInstanceIdentifier: !Ref DBInstanceName
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      Engine: mysql
      EngineVersion: 8.0.21
      MasterUsername: "admin"
      MasterUserPassword: "admin1111"
      Port: 3306

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: This is a privateSubnet
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: RDS
      Tags:
        - Key: Name
          Value: RDS
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
